version: 2
jobs:
 build:
   working_directory: ~/edx-platform
   machine:
     enabled: true
     image: circleci/classic:latest

   parallelism: 4

   steps:
     - checkout

     # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
     # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
     - run:
          name: Creating directories and files
          command: |
           mkdir -p ~/python_2.7.12 ~/sqlite_3.14
           mkdir -p circleci-test-results/artifacts/junit circleci-test-results/artifacts/test_root/log

     - run:
          name: Installing Python v2.7.12
          command: |
           cd ~/python_2.7.12
           wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz
           tar -xvf Python-2.7.12.tgz
           cd Python-2.7.12
           ./configure
           sudo make install

     - run:
         name: Installing and creating virtual environment
         command: |
           sudo pip install virtualenv
           virtualenv --python=`which python` ~/virtualenvs/venv-2.7.12
           source ~/virtualenvs/venv-2.7.12/bin/activate

     - run:
         name: Installing Node v6.11.1 and Node packages
         command: |
           curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
           sudo apt-get install -y nodejs
           sudo npm install -g n
           sudo n 6.11.1

     - run:
         name: Installing pre-reqs
         command: |
            source ~/virtualenvs/venv-2.7.12/bin/activate
            bash ./scripts/install-system-req.sh

     - restore_cache:
              name: Restores cache if any of the requirements file have not changed since the previous run
              key: >-
                virtual-environment-cache-v1
                -{{ checksum "requirements/edx/pre.txt" }}
                -{{ checksum "requirements/edx/base.txt" }}
                -{{ checksum "requirements/edx/github.txt" }}
                -{{ checksum "requirements/edx/local.txt" }}
                -{{ checksum "requirements/edx/custom.txt" }}
                -{{ checksum "requirements/edx/paver.txt" }}
                -{{ checksum "requirements/edx/post.txt" }}

     - restore_cache:
         name: Restores cache if the package.json file have not changed since the previous run
         key: virtual-environment-cache-v1-{{ checksum "package.json" }}

     # Mirror what paver install_prereqs does.
     # After a successful build, CircleCI will
     # cache the virtualenv at that state, so that
     # the next build will not need to install them
     # from scratch again.
     # We need to pin djangorestframework until we have upgraded to edxval 0.0.19 or greater.
     # Output the installed python packages to the console to help with troubleshooting any issues
     # with python requirements.

     # NOTE: If coveralls or django-rest-framework version is changed below, update/increment the
     # cache version as well under 'restore_cache' and 'save_cache' commands
     # i.e virtual-environment-cache-v{x} => virtual-environment-cache-v{x+1}
     - run:
         name: Installing requirements
         command: |
           source ~/virtualenvs/venv-2.7.12/bin/activate
           npm install
           pip install google-compute-engine
           pip install --exists-action w -r requirements/edx/pre.txt
           pip install --exists-action w -r requirements/edx/base.txt
           pip install --exists-action w -r requirements/edx/github.txt
           pip install --exists-action w -r requirements/edx/local.txt
           pip install --exists-action w -r requirements/edx/custom.txt
           pip install --exists-action w -r requirements/edx/paver.txt

           if [ -e requirements/edx/post.txt ]; then pip install --exists-action w -r requirements/edx/post.txt ; fi
           pip install coveralls==1.0
           pip install --upgrade --force-reinstall git+https://github.com/edx/django-rest-framework.git@3c72cb5ee5baebc4328947371195eae2077197b0#egg=djangorestframework==3.2.3
           pip freeze

     # Note: If sqlite version is changed below, update/increment the cache version as well under
     # 'restore_cache' and 'save_cache' commands i.e virtual-environment-cache-v{x} => virtual-environment-cache-v{x+1}
     - run:
         name: Installing custom sqlite 3.14
         command: |
           source ~/virtualenvs/venv-2.7.12/bin/activate
           cd ~/sqlite_3.14
           wget https://github.com/ghaering/pysqlite/archive/2.8.3.tar.gz
           wget https://www.sqlite.org/2016/sqlite-autoconf-3140100.tar.gz
           tar -xzvf sqlite-autoconf-3140100.tar.gz
           tar -xzvf 2.8.3.tar.gz
           cp -av sqlite-autoconf-3140100/. pysqlite-2.8.3/
           cd ./pysqlite-2.8.3 && python setup.py build_static install
           rm -rf 2.8.3.tar.gz sqlite-autoconf-3140100.tar.gz pysqlite-2.8.3 sqlite-autoconf-3140100

     - save_cache:
         key: >-
           virtual-environment-cache-v1
           -{{ checksum "requirements/edx/pre.txt" }}
           -{{ checksum "requirements/edx/base.txt" }}
           -{{ checksum "requirements/edx/github.txt" }}
           -{{ checksum "requirements/edx/local.txt" }}
           -{{ checksum "requirements/edx/custom.txt" }}
           -{{ checksum "requirements/edx/paver.txt" }}
           -{{ checksum "requirements/edx/post.txt" }}

         paths:
            - ~/virtualenvs/venv-2.7.12

     - save_cache:
         key: virtual-environment-cache-v1-{{ checksum "package.json" }}
         paths:
            - node_modules

      # Run tests for the system.
      # all-tests.sh is the entry point for determining
      # which tests to run.
      # See the circleCI documentation regarding parallelism
      # to understand how multiple containers can be used to
      # run subsets of tests in parallel.
      # if a command runs 900 seconds without output, kill it
     - run:
         name: Running Tests
         command: |
           source ~/virtualenvs/venv-2.7.12/bin/activate
           ./scripts/all-tests.sh
         no_output_timeout: 15m

     # If you have enabled coveralls for your repo, configure your COVERALLS_REPO_TOKEN
     # as an Environment Variable in the Project Settings on CircleCI, and coverage
     # data will automatically be sent to coveralls. See https://coveralls.io/
     # If you have not set up set up coveralls then the following statement will
     # print a message but not affect the pass/fail status of the build.
     - run:
         name: Generate report
         command: |
           source ~/virtualenvs/venv-2.7.12/bin/activate
           if [ $(find reports -type f | wc -l) -gt 0 ]; then cp -r reports/. circleci-test-results/artifacts/junit; fi
           if [ -z $COVERALLS_REPO_TOKEN ]; then echo "Coveralls token not defined."; else coveralls; fi

     - store_artifacts:
         path: circleci-test-results/artifacts/junit

     - store_artifacts:
         path: test_root/log
         destination: log

     - store_test_results:
         path: circleci-test-results/artifacts/junit