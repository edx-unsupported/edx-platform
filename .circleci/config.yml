version: 2
jobs:
 build:
   #working_directory: ~/edx-platform
   docker:
     - image: circleci/build-image:ubuntu-14.04-XXL-1327-3401d20
   parallelism: 4

   steps:
     - checkout

     # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
     # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
     - run: mkdir -p ~/tmp/circleci-artifacts ~/tmp/circleci-test-results

#     - run:
#         name: Installing Python v2.7.10
#         command: |
#           cd ~
#           mkdir python_2.7.10
#           cd python_2.7.10
#           wget https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz
#           tar -xvf Python-2.7.10.tgz
#           cd Python-2.7.10
#           ./configure
#           sudo make install
#
#     - run:
#         name: Installing and creating virtual environment
#         command: |
#           cd ~
#           pip install virtualenv
#           virtualenv --python=`which python` virtualenvs/venv-2.7.10
#           source virtualenvs/venv-2.7.10/bin/activate

     - run:
         name: Installing Node v6.11.1 and Node packages
         command: |
           curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
           apt-get install nodejs
           npm install -g n
           n 6.11.1
           npm install

      #Mirror what paver install_prereqs does.
      #After a successful build, CircleCI will
      #cache the virtualenv at that state, so that
      #the next build will not need to install them
      #from scratch again.
     - run:
         name: Installing pre-reqs
         command: |
            bash ./scripts/install-system-req.sh

     - restore_cache:
         name: Restores cache if the Branch key template or pre.txt file have not changed since the previous run
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/pre.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or base.txt file have not changed since the previous run
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/base.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or github.txt file have not changed since the previous run
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/github.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or local.txt file have not changed since the previous run
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/local.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or custom.txt file have not changed since the previous run
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/custom.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or paver.txt file have not changed since the previous run
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/paver.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or package.json file have not changed since the previous run
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "package.json" }}

     - run:
         name: Installing requirements
         command: |
           cd ~
           pip install --exists-action w -r edx-platform/requirements/edx/pre.txt
           pip install --exists-action w -r edx-platform/requirements/edx/base.txt
           pip install --exists-action w -r edx-platform/requirements/edx/github.txt
           pip install --exists-action w -r edx-platform/requirements/edx/local.txt
           pip install --exists-action w -r edx-platform/requirements/edx/custom.txt
           pip install --exists-action w -r edx-platform/requirements/edx/paver.txt

           if [ -e edx-platform/requirements/edx/post.txt ]; then pip install --exists-action w -r edx-platform/requirements/edx/post.txt ; fi
           pip install coveralls==1.0
           pip install --upgrade --force-reinstall git+https://github.com/edx/django-rest-framework.git@3c72cb5ee5baebc4328947371195eae2077197b0#egg=djangorestframework==3.2.3
           pip freeze

     # Install custom sqlite 3.14
     - run:
         name: Installing custom sqlite 3.14
         command: |
           cd ~
           mkdir sqlite_3.14
           cd sqlite_3.14
           wget https://github.com/ghaering/pysqlite/archive/2.8.3.tar.gz
           wget https://www.sqlite.org/2016/sqlite-autoconf-3140100.tar.gz
           tar -xzvf sqlite-autoconf-3140100.tar.gz
           tar -xzvf 2.8.3.tar.gz
           cp -av sqlite-autoconf-3140100/. pysqlite-2.8.3/
           cd ./pysqlite-2.8.3 && python setup.py build_static install
           rm -rf 2.8.3.tar.gz sqlite-autoconf-3140100.tar.gz pysqlite-2.8.3 sqlite-autoconf-3140100

     - save_cache:
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/local.txt" }}
         paths:
            - ~/store_cache

     - save_cache:
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/pre.txt" }}
         paths:
            - ~/store_cache

     - save_cache:
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/custom.txt" }}
         paths:
            - ~/store_cache

     - save_cache:
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/github.txt" }}
         paths:
            - ~/store_cache

     - save_cache:
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/base.txt" }}
         paths:
            - ~/store_cache

     - save_cache:
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/paver.txt" }}
         paths:
            - ~/store_cache

     - save_cache:
         key: cache-edx-platform-{{ .Branch }}-{{ checksum "package.json" }}
         paths:
            - ~/store_cache

      # Run tests for the system.
      # all-tests.sh is the entry point for determining
      # which tests to run.
      # See the circleCI documentation regarding parallelism
      # to understand how multiple containers can be used to
      # run subsets of tests in parallel.
      # if a command runs 900 seconds without output, kill it
     - run:
         name: Running Tests
         command: |
           ./scripts/all-tests.sh
         no_output_timeout: 15m

     # If you have enabled coveralls for your repo, configure your COVERALLS_REPO_TOKEN
     # as an Environment Variable in the Project Settings on CircleCI, and coverage
     # data will automatically be sent to coveralls. See https://coveralls.io/
     # If you have not set up set up coveralls then the following statement will
     # print a message but not affect the pass/fail status of the build.
     - run:
         name: Generate report
         command: |
           if [ -z $COVERALLS_REPO_TOKEN ]; then echo "Coveralls token not defined."; else coveralls; fi

     - store_test_results:
         path: ~/tmp/circleci-test-results

     - store_artifacts:
         path: ~/tmp/circleci-artifacts
         destination: artifacts

     - store_artifacts:
         path: ~/tmp/circleci-artifacts
         destination: artifacts