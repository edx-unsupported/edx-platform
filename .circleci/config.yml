version: 2
jobs:
 build:
   working_directory: ~/edx-platform
   docker:
     - image: circleci/build-image:ubuntu-14.04-XXL-1327-3401d20
   parallelism: 4
   steps:
     - checkout

     - restore_cache:
         name: Restores cache if the Branch key template or pre.txt file have not changed since the previous run
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/pre.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or base.txt file have not changed since the previous run
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/base.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or github.txt file have not changed since the previous run
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/github.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or local.txt file have not changed since the previous run
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/local.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or custom.txt file have not changed since the previous run
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/custom.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or paver.txt file have not changed since the previous run
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/paver.txt" }}
     - restore_cache:
         name: Restores cache if the Branch key template or package.json file have not changed since the previous run
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "package.json" }}

     - run:
         name: Install Python v2.7.10
         command: |
           cd ~
           mkdir python_2.7.10
           cd python_2.7.10
           wget https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz
           tar -xvf Python-2.7.10.tgz
           cd Python-2.7.10
           ./configure
           sudo make install

     - run:
         name: Installing node v6.11.1 and node packages
         command: |
           curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
           apt-get install nodejs
           npm install -g n
           n 6.11.1
           npm install

      #Mirror what paver install_prereqs does.
      #After a successful build, CircleCI will
      #cache the virtualenv at that state, so that
      #the next build will not need to install them
      #from scratch again.
#     - run:
#         name: Installing pre-reqs
#         command: bash ./scripts/install-system-req.sh
#
#     - run:
#         name: Installing python packages
#         command: |
#           cd ~
#           pip install --exists-action w -r edx-platform/requirements/edx/pre.txt
#           pip install --exists-action w -r edx-platform/requirements/edx/base.txt
#           pip install --exists-action w -r edx-platform/requirements/edx/github.txt
#           pip install --exists-action w -r edx-platform/requirements/edx/local.txt
#           pip install --exists-action w -r edx-platform/requirements/edx/custom.txt
#           pip install --exists-action w -r edx-platform/requirements/edx/paver.txt
#
#           if [ -e edx-platform/requirements/edx/post.txt ]; then pip install --exists-action w -r edx-platform/requirements/edx/post.txt ; fi
#           pip install coveralls==1.0
#           pip install --upgrade --force-reinstall git+https://github.com/edx/django-rest-framework.git@3c72cb5ee5baebc4328947371195eae2077197b0#egg=djangorestframework==3.2.3
#           pip freeze
#
#     - run:
#         name: Installing custom sqlite 3.14
#         command: |
#           cd ~
#           mkdir sqlite_3.14
#           cd sqlite_3.14
#           wget https://github.com/ghaering/pysqlite/archive/2.8.3.tar.gz
#           wget https://www.sqlite.org/2016/sqlite-autoconf-3140100.tar.gz
#           tar -xzvf sqlite-autoconf-3140100.tar.gz
#           tar -xzvf 2.8.3.tar.gz
#           cp -av sqlite-autoconf-3140100/. pysqlite-2.8.3/
#           cd ./pysqlite-2.8.3 && python setup.py build_static install
#           rm -rf 2.8.3.tar.gz sqlite-autoconf-3140100.tar.gz pysqlite-2.8.3 sqlite-autoconf-3140100
#           cd ~
#           ls
     - save_cache: # special step to save dependency cache
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/local.txt" }}
         paths:
            - ~/store_cache

     - save_cache: # special step to save dependency cache
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/pre.txt" }}
         paths:
         - ~/store_cache

     - save_cache: # special step to save dependency cache
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/custom.txt" }}
         paths:
         - ~/store_cache

     - save_cache: # special step to save dependency cache
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/github.txt" }}
         paths:
         - ~/store_cache

     - save_cache: # special step to save dependency cache
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/base.txt" }}
         paths:
         - ~/store_cache

     - save_cache: # special step to save dependency cache
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "requirements/edx/paver.txt" }}
         paths:
         - ~/store_cache

     - save_cache: # special step to save dependency cache
         key: v1-edx-platform-{{ .Branch }}-{{ checksum "package.json" }}
         paths:
         - ~/store_cache

#
#     - run:
#         name: Testing Application
#         command: |
#           echo "Python version $(python -V)"
#           echo "Node version $(node -v)"
#           echo "NPM version $(npm -v)"
#           echo "PEP8 version $(pep8 --version)"
#           echo "Path is $(pwd)"
#           ls
#           ./scripts/all-tests.sh
#         no_output_timeout: 15m

     - run:
         name: Generate report
         command: |
           cd ~
           mkdir -p reports/junit
           if [ $(find reports -type f | wc -l) -gt 0 ] ; then cp -r reports/. reports/junit ; fi
           if [ -z $COVERALLS_REPO_TOKEN ]; then echo "Coveralls token not defined."; else coveralls; fi

     - store_test_results:
         path: /tmp/test-results

     - store_artifacts:
         path: ~/test_root/log
         destination: reports

     - store_artifacts:
         path: ~/reports
         destination: reports